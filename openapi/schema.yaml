openapi: 3.0.0
info:
    title: OpenAPI definition
    version: v0
servers:
    -   url: http://localhost:8080
        description: Generated server url
paths:
    /login:
        post:
            tags:
                - LoginApi
            operationId: login
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/User"
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/TokenData"


    /register:
        post:
            tags:
                - RegisterApi
            operationId: register
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/User"
                required: true
            responses:
                "200":
                    description: OK


    /test:
        get:
            tags:
                - TestApi
            operationId: test
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: string


    /users/{username}:
        get:
            tags:
                - UserApi
            operationId: getUserByUsername
            parameters:
                -   name: username
                    in: path
                    required: true
                    schema:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"

        put:
            tags:
                - UserApi
            operationId: updateUser
            parameters:
                -   name: username
                    in: path
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            type: array
                            items:
                                $ref: "#/components/schemas/RoleEnum"
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"


    /users/refreshtoken:
        get:
            tags:
                - UserApi
            operationId: refreshToken
            responses:
                "200":
                    description: OK


    /users:
        get:
            tags:
                - UserApi
            operationId: getAllUsers
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/User"

        post:
            tags:
                - UserApi
            operationId: createUser
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/User"
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/User"


    /articles:
        get:
            tags:
                - ArticleApi
            operationId: getAllArticles
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: "#/components/schemas/Article"

        post:
            tags:
                - ArticleApi
            operationId: createArticle
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Article"
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Article"


    /articles/{id}:
        get:
            tags:
                - ArticleApi
            operationId: getArticle
            parameters:
                -   name: id
                    in: path
                    required: true
                    schema:
                        type: number
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Article"

        put:
            tags:
                - ArticleApi
            operationId: updateArticle
            parameters:
                -   name: id
                    in: path
                    required: true
                    schema:
                        type: number
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Article"
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Article"

        delete:
            tags:
                - ArticleApi
            operationId: deleteArticle
            parameters:
                -   name: id
                    in: path
                    required: true
                    schema:
                        type: number
            responses:
                "200":
                    description: OK


    /comment/{articleId}:
        post:
            tags:
                - CommentApi
            operationId: addComment
            parameters:
                -   name: articleId
                    in: path
                    required: true
                    schema:
                        type: number
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Comment"
                required: true
            responses:
                "201":
                    description: CREATED
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"


    /comment/{id}:
        put:
            tags:
                - CommentApi
            operationId: updateComment
            parameters:
                -   name: id
                    in: path
                    required: true
                    schema:
                        type: number
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Comment"
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Comment"

        delete:
            tags:
                - CommentApi
            operationId: deleteComment
            parameters:
                -   name: id
                    in: path
                    required: true
                    schema:
                        type: number
            responses:
                "200":
                    description: OK


components:
    securitySchemes:
        bearerAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT

    schemas:
        TokenData:
            type: object
            required:
                - accessToken
                - refreshToken
            properties:
                accessToken:
                    type: string
                refreshToken:
                    type: string

        User:
            type: object
            required:
                - username
            properties:
                id:
                    type: string
                username:
                    type: string
                password:
                    type: string
                roles:
                    type: array
                    items:
                        $ref: "#/components/schemas/RoleEnum"

        Article:
            type: object
            required:
                - headline
                - content
            properties:
                id:
                    type: number
                headline:
                    type: string
                content:
                    type: string
                comments:
                    type: array
                    items:
                        $ref: "#/components/schemas/Comment"
                author:
                    type: string
                createdAt:
                    type: string
                    format: date-time

        Comment:
            type: object
            required:
                - content
            properties:
                id:
                    type: number
                content:
                    type: string
                author:
                    type: string
                createdAt:
                    type: string
                    format: date-time

        RoleEnum:
            type: string
            enum:
                - LESER
                - AUTOR
                - MODERATOR
                - ADMIN
            x-enum-varnames:
                - LESER
                - AUTOR
                - MODERATOR
                - ADMIN
